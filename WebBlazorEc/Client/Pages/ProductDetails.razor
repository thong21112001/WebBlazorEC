@page "/product/{id:int}"
@inject IProductService ProductService

@if (product == null)
{
    <span>@message</span>
}else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">
                @product.Title
            </h2>

            <p>@product.Description</p>

            @if (GetSelectedProductVariant() != null)
            {
                if (GetSelectedProductVariant().OriginalPrice > GetSelectedProductVariant().Price)
                {
                    <h6 class="text-muted text-decoration-line-through">
                        $@GetSelectedProductVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedProductVariant().Price
                </h4>
            }
        </div>
    </div>
}


@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        message = "Loading product...";
        var result = await ProductService.GetProductAsync(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedProductVariant()
    {
        var procVariant = product.ProductVariants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);
        return procVariant;
    }

}
