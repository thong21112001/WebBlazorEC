@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
    <span>@message</span>
}else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">
                @product.Title
            </h2>

            <p>@product.Description</p>
            @* Hộp chọn để có thể lựa các biến thể khác của sản phẩm *@
            @if (product.ProductVariants != null && product.ProductVariants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var item in product.ProductVariants)
                        {
                            <option value="@item.ProductTypeId">@item.ProductType.Name</option>
                        }
                    </select>
                </div>
            }

            @if (GetSelectedProductVariant() != null)
            {
                if (GetSelectedProductVariant().OriginalPrice > GetSelectedProductVariant().Price)
                {
                    <h6 class="text-muted text-decoration-line-through">
                        $@GetSelectedProductVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedProductVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart 
            </button>
        </div>
    </div>
}


@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        message = "Loading product...";
        var result = await ProductService.GetProductAsync(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedProductVariant()
    {
        var procVariant = product.ProductVariants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);
        return procVariant;
    }

    private async Task AddToCart()
    {
        var prodVariant = GetSelectedProductVariant();
        var cartItem = new CartItem
            {
                ProductId = prodVariant.ProductId,
                ProductTypeId = prodVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }

}
