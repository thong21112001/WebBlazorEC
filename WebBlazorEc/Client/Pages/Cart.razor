@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping cart</h3>

@if (_cartProductResponses == null || _cartProductResponses.Count == 0)
{
    <span>@Message</span>
}
else if (orderPlace)
{
    <span>Thank you for your order! You can check your order <a href="orders">HERE</a>.</span>
}
else
{
    <div>
        @foreach (var item in _cartProductResponses)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img class="image" src="@item.ImageUrl" />
                </div>
                <div class="name">
                    <h5><a href="/product/@item.ProductId">@item.Title</a></h5>
                    <span>
                        @item.ProductType
                    </span>
                    <br/>
                    <input type="number" value="@item.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e,item))" class="form-control input-quantity" min="1"/>
                    <button class="btn btn-delete" @onclick="@(() => RemoveProductFromCart(item.ProductId,item.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(item.Price * item.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@_cartProductResponses.Count): $@_cartProductResponses.Sum(p=>@p.Price * p.Quantity)
        </div>
    </div>

    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">
        Place order
    </button>
}

@code {
    List<CartProductResponse> _cartProductResponses = null;
    string Message = "Loading cart...";
    bool orderPlace = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlace = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();

        _cartProductResponses = await CartService.GetCartProducts();

        if (_cartProductResponses == null || _cartProductResponses.Count == 0)
        {
            Message = "Your cart is empty";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e,CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);  
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPlace = true;
    }
}
