@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<h3>Product Types</h3>

<div class="header">
    <div class="col">Name</div>
    <div class="col"></div>
</div>

@if (ProductTypeService != null && ProductTypeService.ProductTypes != null)
{
    foreach (var prodType in ProductTypeService.ProductTypes)
    {
        if (prodType.Editing)
        {
            <EditForm Model="editProductType" OnSubmit="UpdateProductType">
                <div class="row">
                    <div class="col">
                        <InputText @bind-Value="editProductType.Name" class="form-control"></InputText>
                    </div>
                    <div class="col">
                        <button type="submit" class="btn btn-primary">
                            <i class="oi oi-cloud-upload"></i>
                        </button>
                        <button @onclick="CancelProductType" class="btn btn-primary">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <div class="row">
                <div class="col">
                    @prodType.Name
                </div>
                <div class="col">
                    <button @onclick="(() => EditProductType(prodType))" class="btn btn-primary">
                        <i class="oi oi-pencil"></i>
                    </button>
                </div>
            </div>
        }
    }

    <button class="btn btn-primary" @onclick="CreateNewProductType">
        <i class="oi oi-plus"></i> Add new product type
    </button>
}
else
{
    <span>BUG =))</span>
}

@code {
    ProductType? editProductType = null;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await ProductTypeService.GetProductTypeAsync();
            ProductTypeService.OnChange += StateHasChanged;
        }
        catch (Exception ex)
        {
            // Xử lý lỗi ở đây, ví dụ: ghi log
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productType)
    {
        productType.Editing = true;
        editProductType = productType;
    }

    private void CreateNewProductType()
    {
        editProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if (editProductType.IsNew)
        {
            await ProductTypeService.AddProductTypeAsync(editProductType);
        }
        else
        {
            await ProductTypeService.UpdateProductTypeAsync(editProductType);
        }

        //trả về từ đầu
        editProductType = new ProductType();
    }

    private async Task CancelProductType()
    {
        editProductType = new ProductType();
        await ProductTypeService.GetProductTypeAsync();
    }
}

