@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>Loading product... ('BUG :))')</span>
}else
{
    <ul class="list-unstyled">
        @foreach (var item in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@item.Id">
                        <img class="media-img" src="@item.ImageUrl" alt="@item.Title">
                    </a>
                </div>

                <div class="media-body">
                    <a href="/product/@item.Id">
                        <h4 class="mb-0">@item.Title</h4>
                    </a>

                    <p>
                        @item.Description
                    </p>

                    <h5 class="price">@GetPriceText(item)</h5>
                </div>
            </li>
        }
    </ul>
}
@code {
    protected override void OnInitialized()
    {
        //Thông báo cho component danh mục đã thay đổi và hiển thị lại các sản phẩm đúng với danh mục
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    //Hiển thị đơn giá bắt đầu cho sản phẩm vì có nhiều biến thể từ sản phẩm
    private string GetPriceText(Product product)
    {
        var result = product.ProductVariants;
        if (result.Count == 0)
        {
            return string.Empty;
        }
        else if (result.Count == 1)
        {
            return $"${result[0].Price}";   //Dành cho sản phẩm không biến thể có 1 giá
        }
        //Đây là dành cho biến thể
        decimal minPrice = result.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
